from aiogram import types
from aiogram.dispatcher.filters.builtin import CommandStart
from handlers.users import misc as ms
from loader import dp
from keyboards import ik,kb
from aiogram.dispatcher import FSMContext
from utils.db_api import database as db
import random
import os
from handlers.users import lt
from data import text as txt
from states import st

@dp.callback_query_handler(state="*")
async def main(call: types.CallbackQuery, state: FSMContext):
    params = call.data.split("-")
    match params[0]:
        case "–ê":
            db.update_calculator(call.from_user.id, "–ê")
            data = db.game(call.from_user.id)
            await call.message.edit_caption(f"{data['word']}",reply_markup=ik.game)
        case "–ë":
            db.update_calculator(call.from_user.id, "–ë")
            data = db.game(call.from_user.id)
            await call.message.edit_caption(f"{data['word']}", reply_markup=ik.game)
        case "–í":
            db.update_calculator(call.from_user.id, "–í")
            data = db.game(call.from_user.id)
            await call.message.edit_caption(f"{data['word']}", reply_markup=ik.game)
        case "–ì":
            db.update_calculator(call.from_user.id, "–ì")
            data = db.game(call.from_user.id)
            await call.message.edit_caption(f"{data['word']}", reply_markup=ik.game)
        case "–î":
            db.update_calculator(call.from_user.id, "–î")
            data = db.game(call.from_user.id)
            await call.message.edit_caption(f"{data['word']}", reply_markup=ik.game)
        case "E":
            db.update_calculator(call.from_user.id, "E")
            data = db.game(call.from_user.id)
            await call.message.edit_caption(f"{data['word']}", reply_markup=ik.game)
        case "–Å":
            db.update_calculator(call.from_user.id, "–Å")
            data = db.game(call.from_user.id)
            await call.message.edit_caption(f"{data['word']}", reply_markup=ik.game)
        case "–ñ":
            db.update_calculator(call.from_user.id, "–ñ")
            data = db.game(call.from_user.id)
            await call.message.edit_caption(f"{data['word']}", reply_markup=ik.game)
        case "–ó":
            db.update_calculator(call.from_user.id, "–ó")
            data = db.game(call.from_user.id)
            await call.message.edit_caption(f"{data['word']}", reply_markup=ik.game)
        case "–ò":
            db.update_calculator(call.from_user.id, "–ò")
            data = db.game(call.from_user.id)
            await call.message.edit_caption(f"{data['word']}", reply_markup=ik.game)
        case "–ô":
            db.update_calculator(call.from_user.id, "–ô")
            data = db.game(call.from_user.id)
            await call.message.edit_caption(f"{data['word']}", reply_markup=ik.game)
        case "–ö":
            db.update_calculator(call.from_user.id, "–ö")
            data = db.game(call.from_user.id)
            await call.message.edit_caption(f"{data['word']}", reply_markup=ik.game)
        case "–õ":
            db.update_calculator(call.from_user.id, "–õ")
            data = db.game(call.from_user.id)
            await call.message.edit_caption(f"{data['word']}", reply_markup=ik.game)
        case "–ú":
            db.update_calculator(call.from_user.id, "–ú")
            data = db.game(call.from_user.id)
            await call.message.edit_caption(f"{data['word']}", reply_markup=ik.game)
        case "–ù":
            db.update_calculator(call.from_user.id, "–ù")
            data = db.game(call.from_user.id)
            await call.message.edit_caption(f"{data['word']}", reply_markup=ik.game)
        case "–û":
            db.update_calculator(call.from_user.id, "–û")
            data = db.game(call.from_user.id)
            await call.message.edit_caption(f"{data['word']}", reply_markup=ik.game)
        case "–ü":
            db.update_calculator(call.from_user.id, "–ü")
            data = db.game(call.from_user.id)
            await call.message.edit_caption(f"{data['word']}", reply_markup=ik.game)
        case "–†":
            db.update_calculator(call.from_user.id, "–†")
            data = db.game(call.from_user.id)
            await call.message.edit_caption(f"{data['word']}", reply_markup=ik.game)
        case "–°":
            db.update_calculator(call.from_user.id, "–°")
            data = db.game(call.from_user.id)
            await call.message.edit_caption(f"{data['word']}", reply_markup=ik.game)
        case "–¢":
            db.update_calculator(call.from_user.id, "–¢")
            data = db.game(call.from_user.id)
            await call.message.edit_caption(f"{data['word']}", reply_markup=ik.game)
        case "–£":
            db.update_calculator(call.from_user.id, "–£")
            data = db.game(call.from_user.id)
            await call.message.edit_caption(f"{data['word']}", reply_markup=ik.game)
        case "–§":
            db.update_calculator(call.from_user.id, "–§")
            data = db.game(call.from_user.id)
            await call.message.edit_caption(f"{data['word']}", reply_markup=ik.game)
        case "–•":
            db.update_calculator(call.from_user.id, "–•")
            data = db.game(call.from_user.id)
            await call.message.edit_caption(f"{data['word']}", reply_markup=ik.game)
        case "–¶":
            db.update_calculator(call.from_user.id, "–¶")
            data = db.game(call.from_user.id)
            await call.message.edit_caption(f"{data['word']}", reply_markup=ik.game)
        case "–ß":
            db.update_calculator(call.from_user.id, "–ß")
            data = db.game(call.from_user.id)
            await call.message.edit_caption(f"{data['word']}", reply_markup=ik.game)
        case "–®":
            db.update_calculator(call.from_user.id, "–®")
            data = db.game(call.from_user.id)
            await call.message.edit_caption(f"{data['word']}", reply_markup=ik.game)
        case "–©":
            db.update_calculator(call.from_user.id, "–©")
            data = db.game(call.from_user.id)
            await call.message.edit_caption(f"{data['word']}", reply_markup=ik.game)
        case "–™":
            db.update_calculator(call.from_user.id, "–™")
            data = db.game(call.from_user.id)
            await call.message.edit_caption(f"{data['word']}", reply_markup=ik.game)
        case "–´":
            db.update_calculator(call.from_user.id, "–´")
            data = db.game(call.from_user.id)
            await call.message.edit_caption(f"{data['word']}", reply_markup=ik.game)
        case "–¨":
            db.update_calculator(call.from_user.id, "–¨")
            data = db.game(call.from_user.id)
            await call.message.edit_caption(f"{data['word']}", reply_markup=ik.game)
        case "–≠":
            db.update_calculator(call.from_user.id, "–≠")
            data = db.game(call.from_user.id)
            await call.message.edit_caption(f"{data['word']}", reply_markup=ik.game)
        case "–Æ":
            db.update_calculator(call.from_user.id, "–Æ")
            data = db.game(call.from_user.id)
            await call.message.edit_caption(f"{data['word']}", reply_markup=ik.game)
        case "–Ø":
            db.update_calculator(call.from_user.id, "–Ø")
            data = db.game(call.from_user.id)
            await call.message.edit_caption(f"{data['word']}", reply_markup=ik.game)

        case "del":
            db.update_game(call.from_user.id,"word","–í–∞—à –≤–∞—Ä–∏–∞–Ω—Ç: ")
            #db.create_game(call.from_user.id)
            data = db.game(call.from_user.id)
            await call.message.edit_caption(f"{data['word']}",reply_markup=ik.game)

        case "‚å´":
            db.delete_one(call.from_user.id)
            data = db.game(call.from_user.id)
            await call.message.edit_caption(f"{data['word']}", reply_markup=ik.game)

        case "check":
            data = db.game(call.from_user.id)['photo_name']
            text = db.game(call.from_user.id)['word']
            split_text = text.split(":")
            words_after_colon = split_text[1].strip().split()
            word = words_after_colon[0]
            if data == word:
                data_user_words = db.get_user(call.from_user.id)['total_words']
                data_user_rating = db.get_user(call.from_user.id)['rating']
                data_user_guessed_words = db.game(call.from_user.id)['guessed_words']
                db.update_userfield(call.from_user.id,"total_words",data_user_words+1)
                db.update_userfield(call.from_user.id,"rating",data_user_rating+0.1)
                await call.message.delete()
                await call.message.answer("üéâ–ü–æ–∑–¥–∞—Ä–∞–≤–ª—è—é!\n"
                                          "–¢—ã –≤–µ—Ä–Ω–æ –æ—Ç–≥–∞–¥–∞–ª —Å–ª–æ–≤–æ,—Ö–æ—á–µ—à—å –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å?",reply_markup=ik.further)
            else:
                await call.answer("–ù–µ –≤–µ—Ä–Ω–æ,–ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑!üòä")

        case "close":
            await call.message.delete()
            await call.message.answer("üòî–ñ–∞–ª—å —á—Ç–æ —Ç—ã –∑–∞–∫–æ–Ω—á–∏–ª –∏–≥—Ä—É, –±—É–¥—É –∂–¥–∞—Ç—å —Ç–µ–±—è —Å–Ω–æ–≤–∞!\n\n"
                                      "–ü–æ–ª—å–∑—É–π—Å—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –Ω–∏–∂–µüëá",reply_markup=kb.start)

        case "further":
            await call.message.delete()
            directory = ".\photo"
            all_files_in_directory = os.listdir(directory)
            random_file = random.choice(all_files_in_directory)
            file_name, file_extension = os.path.splitext(random_file)
            db.update_game(call.from_user.id, "photo_name", f"{file_name}")
            data_user_guessed = db.game(call.from_user.id)['guessed']
            with open(f"{directory}/{random_file}", 'rb') as photo:
                await call.bot.send_photo(call.message.chat.id, photo, caption=txt.game,reply_markup=ik.clue)
                await st.UserState.game.set()

        case "rating_user":
            await call.message.edit_text(lt.ratting(),reply_markup=ik.back)

        case "back_to_profile_menu":
            await call.message.edit_text(lt.profile(call.from_user.id),reply_markup=ik.user)

        case "close_game":
            await call.message.delete()
            await state.finish()
            await call.message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—éüìï", reply_markup=kb.start)

        case "friend":
            await call.message.delete()
            await call.message.answer("–ó–¥–µ—Å—å –≤—ã —Å–º–æ–∂–µ—Ç–µ –Ω–∞–π—Ç–∏ —Å–≤–æ–µ–≥–æ –¥—Ä—É–≥–∞(–ø–æ–¥—Ä—É–≥—É) –∏ —É–∑–Ω–∞—Ç—å –µ–≥–æ(–µ–µ) —Ä–µ–π—Ç–∏–Ω–≥!‚û∞\n"
                                      "‚úèÔ∏è–í–≤–µ–¥–∏—Ç–µ Username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
                                      "–ü—Ä–∏ –ø–æ–∏—Å–∫–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ \"@\" (@username)")
            await st.UserState.friend.set()

        case "clue":
            await call.message.delete()
            data_word = db.game(call.from_user.id)['photo_name']
            first_letter = data_word[:2]
            count = len(data_word)
            directory = ".\photo"
            photo_name = db.game(call.from_user.id)['photo_name']
            with open(f"{directory}/{photo_name}.webp", 'rb') as photo:
                await call.bot.send_photo(call.message.chat.id,photo)
                await call.message.answer(f"üìå–ü–µ—Ä–≤—ã–µ –¥–≤–µ –±—É–∫–≤—ã –≤–∞—à–µ–≥–æ —Å–ª–æ–≤–∞: <b>{first_letter}</b>\n"
                                          f"C–ª–æ–≤–æ —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ <b>{count}</b> –±—É–∫–≤.\n"
                                          f"–ë–æ–ª—å—à–µ –Ω–∞ —ç—Ç–æ —Å–ª–æ–≤–æ —É –≤–∞—Å –Ω–µ—Ç –ø–æ–¥—Å–∫–∞–∑–æ–∫!")
                await st.UserState.game.set()

        case "off_state":
            await call.message.delete()
            await call.message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ‚ùé")
            await state.finish()

        case "send":
            await call.message.delete()
            message_id = int(params[1])
            data = await state.get_data()
            await state.finish()
            if len(data) != 0:
                name = data['name']
                url = data['url']
            else:
                name = "0"
                url = "0"
            from_chat_id = call.from_user.id
            await call.message.answer("–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞")
            await ms.sender(message_id, from_chat_id, name, url)

        case 'add_button_to_send':
            message_id = int(params[1])
            await call.message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –∫–Ω–æ–ø–∫–∏", reply_markup=ik.cancel)
            await st.UserState.add_btn_url.set()
            await state.update_data(message_id=message_id)

        case "chat_manage":
            chat_id = int(call.data.split("*")[1])
            match params[1]:
                case 'add_channel':
                    await call.message.delete()
                    await call.message.answer("–í–≤–µ–¥–∏—Ç–µ ID –∫–∞–Ω–∞–ª–∞", reply_markup=ik.cancel)
                    await st.Add_Channel.c_id.set()
                case 'show':
                    await call.message.delete()
                    await call.message.answer(lt.adv_chat_stat(chat_id), reply_markup=ik.admin_delete_adv_chat(chat_id))
                case 'delete':
                    db.delete_adv_chat(chat_id)
                    await call.message.delete()
                    await call.message.answer("‚úÖ–ß–∞—Ç —É–¥–∞–ª–µ–Ω")
        case "im_subscribed":
            sub_status = await ms.check_subscribes(call.from_user.id)
            if sub_status:
                await call.message.edit_text("–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–¥–µ—Ä–∂–∫—É –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞.\n"
                                             "<b>–ë–ª–∞–≥–æ–¥–∞—Ä—è –í–∞–º –æ–Ω –æ—Å—Ç–∞—ë—Ç—Å—è –ø–æ–ª–Ω–æ—Å—Ç—å—é –±–µ—Å–ø–ª–∞—Ç–Ω—ã–º.</b>\n"
                                             "")
            else:
                await call.answer("‚òπÔ∏è–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –æ–¥–∏–Ω –∏–∑ –∫–∞–Ω–∞–ª–æ–≤")



